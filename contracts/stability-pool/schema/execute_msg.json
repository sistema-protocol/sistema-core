{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Update contract config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "$ref": "#/definitions/UpdateConfig"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit the debt token into the pool",
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "properties": {
            "user": {
              "description": "User address, defaults to info.sender",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unstake/Withdraw deposits from the pool",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "description": "Debt token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Restake unstak(ed/ing) assets",
      "type": "object",
      "required": [
        "restake"
      ],
      "properties": {
        "restake": {
          "type": "object",
          "required": [
            "restake_amount"
          ],
          "properties": {
            "restake_amount": {
              "description": "Debt token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim ALL liquidation revenue && TEMA incentives",
      "type": "object",
      "required": [
        "claim_rewards"
      ],
      "properties": {
        "claim_rewards": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Use assets from an Asset pool to liquidate for a Position (Positions Contract)",
      "type": "object",
      "required": [
        "liquidate"
      ],
      "properties": {
        "liquidate": {
          "type": "object",
          "required": [
            "liq_amount"
          ],
          "properties": {
            "liq_amount": {
              "description": "Liquidation amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Decimal"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Positions contract distributes liquidated funds to users",
      "type": "object",
      "required": [
        "distribute"
      ],
      "properties": {
        "distribute": {
          "type": "object",
          "required": [
            "distribute_for",
            "distribution_asset_ratios",
            "distribution_assets"
          ],
          "properties": {
            "distribute_for": {
              "description": "Amount to distribute for",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "distribution_asset_ratios": {
              "description": "Distribution asset ratios",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Decimal"
              }
            },
            "distribution_assets": {
              "description": "Assets to distribute",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allow the Positions contract to use user funds to repay for themselves",
      "type": "object",
      "required": [
        "repay"
      ],
      "properties": {
        "repay": {
          "type": "object",
          "required": [
            "repayment",
            "user_info"
          ],
          "properties": {
            "repayment": {
              "description": "Repayment asset",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "user_info": {
              "description": "User position info",
              "allOf": [
                {
                  "$ref": "#/definitions/UserInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Asset info",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "oneOf": [
        {
          "description": "Cw20 token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateConfig": {
      "type": "object",
      "properties": {
        "incentive_rate": {
          "description": "Incentive rate for deposits",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "max_incentives": {
          "description": "Max incentives",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "tema_denom": {
          "description": "TEMA denom",
          "type": [
            "string",
            "null"
          ]
        },
        "minimum_deposit_amount": {
          "description": "Minimum bid amount",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "osmosis_proxy": {
          "description": "Osmosis Proxy contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "owner": {
          "description": "Contract owner",
          "type": [
            "string",
            "null"
          ]
        },
        "positions_contract": {
          "description": "Positions contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "unstaking_period": {
          "description": "Unstaking period in days",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "UserInfo": {
      "type": "object",
      "required": [
        "position_id",
        "position_owner"
      ],
      "properties": {
        "position_id": {
          "description": "Position ID",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "position_owner": {
          "description": "Position owner",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
