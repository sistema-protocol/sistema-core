{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Update contract config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "osmo_usd_pyth_feed_id": {
              "description": "FURY/USD Pyth price feed id",
              "anyOf": [
                {
                  "$ref": "#/definitions/Identifier"
                },
                {
                  "type": "null"
                }
              ]
            },
            "osmosis_proxy_contract": {
              "description": "Osmosis Proxy contract address",
              "type": [
                "string",
                "null"
              ]
            },
            "owner": {
              "description": "Contract owner",
              "type": [
                "string",
                "null"
              ]
            },
            "pools_for_usd_par_twap": {
              "description": "Osmosis pools for FURY/USD-par TWAP. Replaces saved state.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/TWAPPoolInfo"
              }
            },
            "positions_contract": {
              "description": "Positions contract address",
              "type": [
                "string",
                "null"
              ]
            },
            "pyth_osmosis_address": {
              "description": "Pyth Osmosis address",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add a new asset",
      "type": "object",
      "required": [
        "add_asset"
      ],
      "properties": {
        "add_asset": {
          "type": "object",
          "required": [
            "asset_info",
            "oracle_info"
          ],
          "properties": {
            "asset_info": {
              "description": "Asset info",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "oracle_info": {
              "description": "Asset's oracle info",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetOracleInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Edit an existing asset",
      "type": "object",
      "required": [
        "edit_asset"
      ],
      "properties": {
        "edit_asset": {
          "type": "object",
          "required": [
            "asset_info",
            "remove"
          ],
          "properties": {
            "asset_info": {
              "description": "Asset info",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "oracle_info": {
              "description": "Asset's oracle info. Replaces existing oracle info.",
              "anyOf": [
                {
                  "$ref": "#/definitions/AssetOracleInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "remove": {
              "description": "Toggle to remove",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "oneOf": [
        {
          "description": "Cw20 token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetOracleInfo": {
      "description": "Oracle",
      "type": "object",
      "required": [
        "basket_id",
        "decimals",
        "is_usd_par",
        "pools_for_osmo_twap"
      ],
      "properties": {
        "basket_id": {
          "description": "Basket ID",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "decimals": {
          "description": "Asset decimals",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "is_usd_par": {
          "description": "Bool to provide $1 static_price if the asset is USD-par",
          "type": "boolean"
        },
        "lp_pool_info": {
          "description": "LP pool info",
          "anyOf": [
            {
              "$ref": "#/definitions/PoolInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "pools_for_osmo_twap": {
          "description": "Osmosis pools for FURY TWAP",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TWAPPoolInfo"
          }
        },
        "pyth_price_feed_id": {
          "description": "Pyth price feed ID",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Identifier": {
      "type": "string"
    },
    "LPAssetInfo": {
      "type": "object",
      "required": [
        "decimals",
        "info",
        "ratio"
      ],
      "properties": {
        "decimals": {
          "description": "Asset decimals",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "info": {
          "description": "Pool asset denom",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "ratio": {
          "description": "Asset ratio in pool",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoolInfo": {
      "description": "Osmosis PoolInfo",
      "type": "object",
      "required": [
        "asset_infos",
        "pool_id"
      ],
      "properties": {
        "asset_infos": {
          "description": "Asset Infos Includes asset decimals (https://api-osmosis.imperator.co/tokens/v2/all)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LPAssetInfo"
          }
        },
        "pool_id": {
          "description": "Pool ID",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "TWAPPoolInfo": {
      "type": "object",
      "required": [
        "base_asset_denom",
        "pool_id",
        "quote_asset_denom"
      ],
      "properties": {
        "base_asset_denom": {
          "description": "Base asset denom",
          "type": "string"
        },
        "pool_id": {
          "description": "Pool ID",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "quote_asset_denom": {
          "description": "Quote asset denom",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
