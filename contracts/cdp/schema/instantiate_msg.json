{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "base_debt_cap_multiplier",
    "collateral_twap_timeframe",
    "create_basket",
    "credit_twap_timeframe",
    "debt_minimum",
    "liq_fee",
    "oracle_time_limit",
    "rate_slope_multiplier"
  ],
  "properties": {
    "base_debt_cap_multiplier": {
      "description": "Base debt cap multiplier",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "collateral_twap_timeframe": {
      "description": "Timeframe for Collateral TWAPs in minutes",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "create_basket": {
      "description": "Basket Creation struct",
      "allOf": [
        {
          "$ref": "#/definitions/CreateBasket"
        }
      ]
    },
    "credit_twap_timeframe": {
      "description": "Timeframe for Credit TWAP in minutes",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "debt_auction": {
      "description": "Debt Auction contract",
      "type": [
        "string",
        "null"
      ]
    },
    "debt_minimum": {
      "description": "Minimum debt per position to ensure liquidatibility",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "dex_router": {
      "description": "Apollo DEX Router contract",
      "type": [
        "string",
        "null"
      ]
    },
    "discounts_contract": {
      "description": "System Discounts contract",
      "type": [
        "string",
        "null"
      ]
    },
    "liq_fee": {
      "description": "Protocol liquidation fee to restrict self liquidations",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "liquidity_contract": {
      "description": "Liquidity Check contract",
      "type": [
        "string",
        "null"
      ]
    },
    "oracle_contract": {
      "description": "Oracle contract",
      "type": [
        "string",
        "null"
      ]
    },
    "oracle_time_limit": {
      "description": "Seconds until oracle failure is accepted",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "osmosis_proxy": {
      "description": "Osmosis Proxy contract",
      "type": [
        "string",
        "null"
      ]
    },
    "owner": {
      "description": "Contract Owner",
      "type": [
        "string",
        "null"
      ]
    },
    "rate_slope_multiplier": {
      "description": "Interest rate slope multiplier",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "stability_pool": {
      "description": "Stability Pool contract",
      "type": [
        "string",
        "null"
      ]
    },
    "staking_contract": {
      "description": "TEMA Staking contract",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Asset info",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "oneOf": [
        {
          "description": "Cw20 token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CreateBasket": {
      "description": "Create the contract's Basket",
      "type": "object",
      "required": [
        "basket_id",
        "collateral_types",
        "credit_asset",
        "credit_pool_infos",
        "credit_price"
      ],
      "properties": {
        "base_interest_rate": {
          "description": "Base collateral interest rate. Used to calculate the interest rate for each collateral type.",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "basket_id": {
          "description": "Basket ID",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "collateral_types": {
          "description": "Collateral asset types. Note: Also used to tally asset amounts for ease of calculation of Basket ratios",
          "type": "array",
          "items": {
            "$ref": "#/definitions/cAsset"
          }
        },
        "credit_asset": {
          "description": "Creates native denom for credit_asset",
          "allOf": [
            {
              "$ref": "#/definitions/Asset"
            }
          ]
        },
        "credit_pool_infos": {
          "description": "To measure liquidity for the credit asset",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PoolType"
          }
        },
        "credit_price": {
          "description": "Credit redemption price",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "liq_queue": {
          "description": "Liquidation queue for collateral assets",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "LPAssetInfo": {
      "type": "object",
      "required": [
        "decimals",
        "info",
        "ratio"
      ],
      "properties": {
        "decimals": {
          "description": "Asset decimals",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "info": {
          "description": "Pool asset denom",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "ratio": {
          "description": "Asset ratio in pool",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoolInfo": {
      "description": "Osmosis PoolInfo",
      "type": "object",
      "required": [
        "asset_infos",
        "pool_id"
      ],
      "properties": {
        "asset_infos": {
          "description": "Asset Infos Includes asset decimals (https://api-osmosis.imperator.co/tokens/v2/all)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LPAssetInfo"
          }
        },
        "pool_id": {
          "description": "Pool ID",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "PoolType": {
      "oneOf": [
        {
          "description": "Balancer pool",
          "type": "object",
          "required": [
            "balancer"
          ],
          "properties": {
            "balancer": {
              "type": "object",
              "required": [
                "pool_id"
              ],
              "properties": {
                "pool_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stableswap pool",
          "type": "object",
          "required": [
            "stable_swap"
          ],
          "properties": {
            "stable_swap": {
              "type": "object",
              "required": [
                "pool_id"
              ],
              "properties": {
                "pool_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "cAsset": {
      "description": "CDP",
      "type": "object",
      "required": [
        "asset",
        "max_LTV",
        "max_borrow_LTV",
        "rate_index"
      ],
      "properties": {
        "asset": {
          "description": "Asset data NOTE: AssetInfo denom for an Osmo LP is the shares_denom",
          "allOf": [
            {
              "$ref": "#/definitions/Asset"
            }
          ]
        },
        "max_LTV": {
          "description": "Liquidation LTV",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "max_borrow_LTV": {
          "description": "Max borrow limit, aka what u can borrow up to",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "pool_info": {
          "description": "Pool Info for Osmosis LP",
          "anyOf": [
            {
              "$ref": "#/definitions/PoolInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "rate_index": {
          "description": "Rate index to smooth rate accrual",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
