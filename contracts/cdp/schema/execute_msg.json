{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Update the contract config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "$ref": "#/definitions/UpdateConfig"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit collateral into a Position",
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "properties": {
            "position_id": {
              "description": "Position ID to deposit into. If the user wants to create a new/separate position, no position id is passed.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "position_owner": {
              "description": "Position owner. Defaults to the sender.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Increase debt of a Position",
      "type": "object",
      "required": [
        "increase_debt"
      ],
      "properties": {
        "increase_debt": {
          "type": "object",
          "required": [
            "position_id"
          ],
          "properties": {
            "LTV": {
              "description": "LTV to borrow up to",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "amount": {
              "description": "Amount of debt to increase",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "mint_to_addr": {
              "description": "Mint debt tokens to this address",
              "type": [
                "string",
                "null"
              ]
            },
            "position_id": {
              "description": "Position ID to increase debt of",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw collateral from a Position",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "assets",
            "position_id"
          ],
          "properties": {
            "assets": {
              "description": "Asset to withdraw",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "position_id": {
              "description": "Position ID to withdraw from",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "send_to": {
              "description": "Send withdrawn assets to this address if not the sender",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Repay debt of a Position",
      "type": "object",
      "required": [
        "repay"
      ],
      "properties": {
        "repay": {
          "type": "object",
          "required": [
            "position_id"
          ],
          "properties": {
            "position_id": {
              "description": "Position ID to repay debt of",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "position_owner": {
              "description": "Position owner to repay debt of if not the sender",
              "type": [
                "string",
                "null"
              ]
            },
            "send_excess_to": {
              "description": "Send excess assets to this address if not the sender",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Repay message for the Stability Pool during liquidations",
      "type": "object",
      "required": [
        "liq_repay"
      ],
      "properties": {
        "liq_repay": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Liquidate a Position",
      "type": "object",
      "required": [
        "liquidate"
      ],
      "properties": {
        "liquidate": {
          "type": "object",
          "required": [
            "position_id",
            "position_owner"
          ],
          "properties": {
            "position_id": {
              "description": "Position ID to liquidate",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "position_owner": {
              "description": "Position owner to liquidate",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Redeem CDT for collateral Redemption limit based on Position owner buy-in",
      "type": "object",
      "required": [
        "redeem_collateral"
      ],
      "properties": {
        "redeem_collateral": {
          "type": "object",
          "properties": {
            "max_collateral_premium": {
              "description": "Max % premium on the redeemed collateral`",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Edit Redeemability for owned Positions",
      "type": "object",
      "required": [
        "edit_redeemability"
      ],
      "properties": {
        "edit_redeemability": {
          "type": "object",
          "required": [
            "position_ids"
          ],
          "properties": {
            "max_loan_repayment": {
              "description": "Edit Max loan repayment %",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "position_ids": {
              "description": "Position IDs to edit",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "premium": {
              "description": "Edit premium on the redeemed collateral. Can't set a 100% premium, as that would be a free loan repayment.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint128",
              "minimum": 0.0
            },
            "redeemable": {
              "description": "Add or remove redeemability",
              "type": [
                "boolean",
                "null"
              ]
            },
            "restricted_collateral_assets": {
              "description": "Restricted collateral assets. These are restricted from use in redemptions. Swaps the full list.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Accrue interest for a Position",
      "type": "object",
      "required": [
        "accrue"
      ],
      "properties": {
        "accrue": {
          "type": "object",
          "required": [
            "position_ids"
          ],
          "properties": {
            "position_ids": {
              "description": "Positon ID to accrue interest for",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "position_owner": {
              "description": "Positon owner to accrue interest for, defaults to sender",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Edit the contract's Basket",
      "type": "object",
      "required": [
        "edit_basket"
      ],
      "properties": {
        "edit_basket": {
          "$ref": "#/definitions/EditBasket"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Edit a cAsset in the contract's Basket",
      "type": "object",
      "required": [
        "editc_asset"
      ],
      "properties": {
        "editc_asset": {
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "description": "cAsset to edit",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "max_LTV": {
              "description": "Point of liquidation",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_borrow_LTV": {
              "description": "Max users can borrow up to",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/CallbackMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Asset info",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "oneOf": [
        {
          "description": "Cw20 token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CallbackMsg": {
      "description": "Note: Since CallbackMsg are always sent by the contract itself, we assume all types are already validated and don't do additional checks. E.g. user addresses are Addr instead of String",
      "oneOf": [
        {
          "description": "Bad debt check post liquidation",
          "type": "object",
          "required": [
            "bad_debt_check"
          ],
          "properties": {
            "bad_debt_check": {
              "type": "object",
              "required": [
                "position_id",
                "position_owner"
              ],
              "properties": {
                "position_id": {
                  "description": "Position ID to check",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "position_owner": {
                  "description": "Position owner to check",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "EditBasket": {
      "type": "object",
      "properties": {
        "added_cAsset": {
          "description": "Add new cAsset",
          "anyOf": [
            {
              "$ref": "#/definitions/cAsset"
            },
            {
              "type": "null"
            }
          ]
        },
        "base_interest_rate": {
          "description": "Base interest rate",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "collateral_supply_caps": {
          "description": "Supply caps for each collateral",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/SupplyCap"
          }
        },
        "cpc_margin_of_error": {
          "description": "Margin of error for difference in TWAP price and redemption price",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "credit_asset_twap_price_source": {
          "description": "Osmosis Pool info for credit->FURY TWAP price Non-USD denominated baskets don't work due to the debt minimum",
          "anyOf": [
            {
              "$ref": "#/definitions/TWAPPoolInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "credit_pool_infos": {
          "description": "Credit pool info for liquidity measuring",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/PoolType"
          }
        },
        "frozen": {
          "description": "Toggle basket freezing",
          "type": [
            "boolean",
            "null"
          ]
        },
        "liq_queue": {
          "description": "Liquidation Queue",
          "type": [
            "string",
            "null"
          ]
        },
        "multi_asset_supply_caps": {
          "description": "Supply caps for asset groups",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/MultiAssetSupplyCap"
          }
        },
        "negative_rates": {
          "description": "Toggle allowance negative redemption rate",
          "type": [
            "boolean",
            "null"
          ]
        },
        "rev_to_stakers": {
          "description": "Toggle Basket revenue to stakers",
          "type": [
            "boolean",
            "null"
          ]
        },
        "take_revenue": {
          "description": "Take revenue, used as a way to distribute revenue",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "LPAssetInfo": {
      "type": "object",
      "required": [
        "decimals",
        "info",
        "ratio"
      ],
      "properties": {
        "decimals": {
          "description": "Asset decimals",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "info": {
          "description": "Pool asset denom",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "ratio": {
          "description": "Asset ratio in pool",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "MultiAssetSupplyCap": {
      "type": "object",
      "required": [
        "assets",
        "supply_cap_ratio"
      ],
      "properties": {
        "assets": {
          "description": "Asset infos",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetInfo"
          }
        },
        "supply_cap_ratio": {
          "description": "Target supply cap ratio",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoolInfo": {
      "description": "Osmosis PoolInfo",
      "type": "object",
      "required": [
        "asset_infos",
        "pool_id"
      ],
      "properties": {
        "asset_infos": {
          "description": "Asset Infos Includes asset decimals (https://api-osmosis.imperator.co/tokens/v2/all)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LPAssetInfo"
          }
        },
        "pool_id": {
          "description": "Pool ID",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "PoolType": {
      "oneOf": [
        {
          "description": "Balancer pool",
          "type": "object",
          "required": [
            "balancer"
          ],
          "properties": {
            "balancer": {
              "type": "object",
              "required": [
                "pool_id"
              ],
              "properties": {
                "pool_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stableswap pool",
          "type": "object",
          "required": [
            "stable_swap"
          ],
          "properties": {
            "stable_swap": {
              "type": "object",
              "required": [
                "pool_id"
              ],
              "properties": {
                "pool_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SupplyCap": {
      "type": "object",
      "required": [
        "asset_info",
        "current_supply",
        "debt_total",
        "lp",
        "supply_cap_ratio"
      ],
      "properties": {
        "asset_info": {
          "description": "Asset info",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "current_supply": {
          "description": "Current amount of asset in Basket",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "debt_total": {
          "description": "Total debt collateralized by asset",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "lp": {
          "description": "is LP?",
          "type": "boolean"
        },
        "stability_pool_ratio_for_debt_cap": {
          "description": "Toggle for a debt cap ratio based on Stability Pool Liquidity. If false, debt cap is based on proportion of TVL.",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "supply_cap_ratio": {
          "description": "Total supply cap ratio",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TWAPPoolInfo": {
      "type": "object",
      "required": [
        "base_asset_denom",
        "pool_id",
        "quote_asset_denom"
      ],
      "properties": {
        "base_asset_denom": {
          "description": "Base asset denom",
          "type": "string"
        },
        "pool_id": {
          "description": "Pool ID",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "quote_asset_denom": {
          "description": "Quote asset denom",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateConfig": {
      "type": "object",
      "properties": {
        "base_debt_cap_multiplier": {
          "description": "Debt minimum multiplier for base debt cap. How many users do we want at 0 credit liquidity?",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "collateral_twap_timeframe": {
          "description": "Collateral TWAP time frame in minutes",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "cpc_multiplier": {
          "description": "Augment the rate of increase per % difference for the redemption rate",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "credit_twap_timeframe": {
          "description": "Credit TWAP time frame in minutes",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "debt_auction": {
          "description": "Debt auction contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "debt_minimum": {
          "description": "Debt minimum value per position.",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "dex_router": {
          "description": "Apollo DEX router contract address.",
          "type": [
            "string",
            "null"
          ]
        },
        "discounts_contract": {
          "description": "System Discounts contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "liq_fee": {
          "description": "Liquidation fee as percent",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "liquidity_contract": {
          "description": "Liquidity Check contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "oracle_contract": {
          "description": "Oracle contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "oracle_time_limit": {
          "description": "Seconds until oracle failure is accepted",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "osmosis_proxy": {
          "description": "Osmosis Proxy contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "owner": {
          "description": "Contract owner",
          "type": [
            "string",
            "null"
          ]
        },
        "rate_slope_multiplier": {
          "description": "Interest rate 2nd Slope multiplier",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "stability_pool": {
          "description": "Stability Pool contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "staking_contract": {
          "description": "Staking contract address",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "cAsset": {
      "description": "CDP",
      "type": "object",
      "required": [
        "asset",
        "max_LTV",
        "max_borrow_LTV",
        "rate_index"
      ],
      "properties": {
        "asset": {
          "description": "Asset data NOTE: AssetInfo denom for an Osmo LP is the shares_denom",
          "allOf": [
            {
              "$ref": "#/definitions/Asset"
            }
          ]
        },
        "max_LTV": {
          "description": "Liquidation LTV",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "max_borrow_LTV": {
          "description": "Max borrow limit, aka what u can borrow up to",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "pool_info": {
          "description": "Pool Info for Osmosis LP",
          "anyOf": [
            {
              "$ref": "#/definitions/PoolInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "rate_index": {
          "description": "Rate index to smooth rate accrual",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}