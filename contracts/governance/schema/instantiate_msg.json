{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "This structure holds the parameters used for creating a Governance contract.",
  "type": "object",
  "required": [
    "expedited_proposal_voting_period",
    "tema_staking_contract_addr",
    "proposal_effective_delay",
    "proposal_expiration_period",
    "proposal_required_quorum",
    "proposal_required_stake",
    "proposal_required_threshold",
    "proposal_voting_period",
    "vesting_contract_addr",
    "vesting_voting_power_multiplier",
    "whitelisted_links"
  ],
  "properties": {
    "expedited_proposal_voting_period": {
      "description": "Expedited Proposal voting period",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "tema_staking_contract_addr": {
      "description": "TEMA Staking contract to query TEMA denom",
      "type": "string"
    },
    "proposal_effective_delay": {
      "description": "Proposal effective delay",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "proposal_expiration_period": {
      "description": "Proposal expiration period",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "proposal_required_quorum": {
      "description": "Proposal required quorum",
      "type": "string"
    },
    "proposal_required_stake": {
      "description": "Proposal required stake",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "proposal_required_threshold": {
      "description": "Proposal required threshold for executable proposals",
      "type": "string"
    },
    "proposal_voting_period": {
      "description": "Proposal voting period",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "vesting_contract_addr": {
      "description": "Address of the vesting contract",
      "type": "string"
    },
    "vesting_voting_power_multiplier": {
      "description": "Multiplier for vesting allocation voting power",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "whitelisted_links": {
      "description": "Whitelisted links",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
