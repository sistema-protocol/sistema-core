{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This enum describes all execute functions available in the contract.",
  "oneOf": [
    {
      "description": "Submit a new proposal in the Governance contract",
      "type": "object",
      "required": [
        "submit_proposal"
      ],
      "properties": {
        "submit_proposal": {
          "type": "object",
          "required": [
            "description",
            "expedited",
            "title"
          ],
          "properties": {
            "description": {
              "type": "string"
            },
            "expedited": {
              "type": "boolean"
            },
            "link": {
              "type": [
                "string",
                "null"
              ]
            },
            "messages": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/ProposalMessage"
              }
            },
            "recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "title": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Cast a vote for an active proposal",
      "type": "object",
      "required": [
        "cast_vote"
      ],
      "properties": {
        "cast_vote": {
          "type": "object",
          "required": [
            "proposal_id",
            "vote"
          ],
          "properties": {
            "proposal_id": {
              "description": "Proposal identifier",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "vote": {
              "description": "Vote option",
              "allOf": [
                {
                  "$ref": "#/definitions/ProposalVoteOption"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set the status of a proposal that expired",
      "type": "object",
      "required": [
        "end_proposal"
      ],
      "properties": {
        "end_proposal": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "description": "Proposal identifier",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Check messages execution",
      "type": "object",
      "required": [
        "check_messages"
      ],
      "properties": {
        "check_messages": {
          "type": "object",
          "required": [
            "messages"
          ],
          "properties": {
            "messages": {
              "description": "messages",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProposalMessage"
              }
            },
            "msg_switch": {
              "description": "Additional contract check messages: 0 - CDP, 1 - Staking, 2 - LQ",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The last endpoint which is executed only if all proposal messages have been passed",
      "type": "object",
      "required": [
        "check_messages_passed"
      ],
      "properties": {
        "check_messages_passed": {
          "type": "object",
          "properties": {
            "error": {
              "type": [
                "boolean",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Execute a successful proposal",
      "type": "object",
      "required": [
        "execute_proposal"
      ],
      "properties": {
        "execute_proposal": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "description": "Proposal identifier",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a proposal that was already executed (or failed/expired)",
      "type": "object",
      "required": [
        "remove_completed_proposal"
      ],
      "properties": {
        "remove_completed_proposal": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "description": "Proposal identifier",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update parameters in the Governance contract ## Executor Only the Governance contract is allowed to update its own parameters",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "$ref": "#/definitions/UpdateConfig"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Use osmosis-std to create a gauge with assets in this contract",
      "type": "object",
      "required": [
        "create_osmosis_gauge"
      ],
      "properties": {
        "create_osmosis_gauge": {
          "type": "object",
          "required": [
            "gauge_msg"
          ],
          "properties": {
            "gauge_msg": {
              "$ref": "#/definitions/MsgCreateGauge"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Use osmosis-std to add to a gauge, owned by this contract, with assets in this contract",
      "type": "object",
      "required": [
        "add_to_osmosis_gauge"
      ],
      "properties": {
        "add_to_osmosis_gauge": {
          "type": "object",
          "required": [
            "gauge_msg"
          ],
          "properties": {
            "gauge_msg": {
              "$ref": "#/definitions/MsgAddToGauge"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "freeze_positions"
      ],
      "properties": {
        "freeze_positions": {
          "type": "object",
          "required": [
            "freeze_these_assets",
            "frozen"
          ],
          "properties": {
            "freeze_these_assets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "frozen": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "BankMsg": {
      "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "send"
          ],
          "properties": {
            "send": {
              "type": "object",
              "required": [
                "amount",
                "to_address"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "to_address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Coin2": {
      "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "type": "string"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CosmosMsg_for_Empty": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/Empty"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "$ref": "#/definitions/StakingMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "distribution"
          ],
          "properties": {
            "distribution": {
              "$ref": "#/definitions/DistributionMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A Stargate message encoded the same way as a protobuf [Any](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto). This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
          "type": "object",
          "required": [
            "stargate"
          ],
          "properties": {
            "stargate": {
              "type": "object",
              "required": [
                "type_url",
                "value"
              ],
              "properties": {
                "type_url": {
                  "type": "string"
                },
                "value": {
                  "$ref": "#/definitions/Binary"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "ibc"
          ],
          "properties": {
            "ibc": {
              "$ref": "#/definitions/IbcMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "gov"
          ],
          "properties": {
            "gov": {
              "$ref": "#/definitions/GovMsg"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DistributionMsg": {
      "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "set_withdraw_address"
          ],
          "properties": {
            "set_withdraw_address": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "The `withdraw_address`",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "withdraw_delegator_reward"
          ],
          "properties": {
            "withdraw_delegator_reward": {
              "type": "object",
              "required": [
                "validator"
              ],
              "properties": {
                "validator": {
                  "description": "The `validator_address`",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Duration": {
      "type": "object",
      "required": [
        "nanos",
        "seconds"
      ],
      "properties": {
        "nanos": {
          "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
          "type": "integer",
          "format": "int32"
        },
        "seconds": {
          "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "GovMsg": {
      "description": "This message type allows the contract interact with the [x/gov] module in order to cast votes.\n\n[x/gov]: https://github.com/cosmos/cosmos-sdk/tree/v0.45.12/x/gov\n\n## Examples\n\nCast a simple vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); use cosmwasm_std::{GovMsg, VoteOption};\n\n#[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::Vote { proposal_id: 4, vote: VoteOption::Yes, })) } ```\n\nCast a weighted vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); # #[cfg(feature = \"cosmwasm_1_2\")] use cosmwasm_std::{Decimal, GovMsg, VoteOption, WeightedVoteOption};\n\n# #[cfg(feature = \"cosmwasm_1_2\")] #[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::VoteWeighted { proposal_id: 4, options: vec![ WeightedVoteOption { option: VoteOption::Yes, weight: Decimal::percent(65), }, WeightedVoteOption { option: VoteOption::Abstain, weight: Decimal::percent(35), }, ], })) } ```",
      "oneOf": [
        {
          "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
          "type": "object",
          "required": [
            "vote"
          ],
          "properties": {
            "vote": {
              "type": "object",
              "required": [
                "proposal_id",
                "vote"
              ],
              "properties": {
                "proposal_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "vote": {
                  "description": "The vote option.\n\nThis should be called \"option\" for consistency with Cosmos SDK. Sorry for that. See <https://github.com/CosmWasm/cosmwasm/issues/1571>.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/VoteOption"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcMsg": {
      "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts (contracts that directly speak the IBC protocol via 6 entry points)",
      "oneOf": [
        {
          "description": "Sends bank tokens owned by the contract to the given address on another chain. The channel must already be established between the ibctransfer module on this chain and a matching module on the remote chain. We cannot select the port_id, this is whatever the local chain has bound the ibctransfer module to.",
          "type": "object",
          "required": [
            "transfer"
          ],
          "properties": {
            "transfer": {
              "type": "object",
              "required": [
                "amount",
                "channel_id",
                "timeout",
                "to_address"
              ],
              "properties": {
                "amount": {
                  "description": "packet data only supports one coin https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Coin"
                    }
                  ]
                },
                "channel_id": {
                  "description": "existing channel to send the tokens over",
                  "type": "string"
                },
                "timeout": {
                  "description": "when packet times out, measured on remote chain",
                  "allOf": [
                    {
                      "$ref": "#/definitions/IbcTimeout"
                    }
                  ]
                },
                "to_address": {
                  "description": "address on the remote chain to receive these tokens",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sends an IBC packet with given data over the existing channel. Data should be encoded in a format defined by the channel version, and the module on the other side should know how to parse this.",
          "type": "object",
          "required": [
            "send_packet"
          ],
          "properties": {
            "send_packet": {
              "type": "object",
              "required": [
                "channel_id",
                "data",
                "timeout"
              ],
              "properties": {
                "channel_id": {
                  "type": "string"
                },
                "data": {
                  "$ref": "#/definitions/Binary"
                },
                "timeout": {
                  "description": "when packet times out, measured on remote chain",
                  "allOf": [
                    {
                      "$ref": "#/definitions/IbcTimeout"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This will close an existing channel that is owned by this contract. Port is auto-assigned to the contract's IBC port",
          "type": "object",
          "required": [
            "close_channel"
          ],
          "properties": {
            "close_channel": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcTimeout": {
      "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
      "type": "object",
      "properties": {
        "block": {
          "anyOf": [
            {
              "$ref": "#/definitions/IbcTimeoutBlock"
            },
            {
              "type": "null"
            }
          ]
        },
        "timestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "IbcTimeoutBlock": {
      "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
      "type": "object",
      "required": [
        "height",
        "revision"
      ],
      "properties": {
        "height": {
          "description": "block height after which the packet times out. the height within the given revision",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "revision": {
          "description": "the version that the client is currently on (e.g. after resetting the chain this could increment 1 as height drops to 0)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "MsgAddToGauge": {
      "description": "MsgAddToGauge adds coins to a previously created gauge",
      "type": "object",
      "required": [
        "gauge_id",
        "owner",
        "rewards"
      ],
      "properties": {
        "gauge_id": {
          "description": "gauge_id is the ID of gauge that rewards are getting added to",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "description": "owner is the gauge owner's address",
          "type": "string"
        },
        "rewards": {
          "description": "rewards are the coin(s) to add to gauge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin2"
          }
        }
      }
    },
    "MsgCreateGauge": {
      "description": "MsgCreateGauge creates a gague to distribute rewards to users",
      "type": "object",
      "required": [
        "coins",
        "is_perpetual",
        "num_epochs_paid_over",
        "owner",
        "pool_id"
      ],
      "properties": {
        "coins": {
          "description": "coins are coin(s) to be distributed by the gauge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin2"
          }
        },
        "distribute_to": {
          "description": "distribute_to show which lock the gauge should distribute to by time duration or by timestamp",
          "anyOf": [
            {
              "$ref": "#/definitions/QueryCondition"
            },
            {
              "type": "null"
            }
          ]
        },
        "is_perpetual": {
          "description": "is_perpetual shows if it's a perpetual or non-perpetual gauge Non-perpetual gauges distribute their tokens equally per epoch while the gauge is in the active period. Perpetual gauges distribute all their tokens at a single time and only distribute their tokens again once the gauge is refilled",
          "type": "boolean"
        },
        "num_epochs_paid_over": {
          "description": "num_epochs_paid_over is the number of epochs distribution will be completed over",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "description": "owner is the address of gauge creator",
          "type": "string"
        },
        "pool_id": {
          "description": "pool_id is the ID of the pool that the gauge is meant to be associated with. if pool_id is set, then the \"QueryCondition.LockQueryType\" must be \"NoLock\" with all other fields of the \"QueryCondition.LockQueryType\" struct unset, including \"QueryCondition.Denom\". However, note that, internally, the empty string in \"QueryCondition.Denom\" ends up being overwritten with incentivestypes.NoLockExternalGaugeDenom(<pool-id>) so that the gauges associated with a pool can be queried by this prefix if needed.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_time": {
          "description": "start_time is the distribution start time",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp2"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ProposalMessage": {
      "description": "This structure describes a proposal message.",
      "type": "object",
      "required": [
        "msg",
        "order"
      ],
      "properties": {
        "msg": {
          "description": "Execution message",
          "allOf": [
            {
              "$ref": "#/definitions/CosmosMsg_for_Empty"
            }
          ]
        },
        "order": {
          "description": "Order of execution of the message",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ProposalVoteOption": {
      "description": "This enum describes available options for voting on a proposal.",
      "type": "string",
      "enum": [
        "for",
        "against",
        "amend",
        "remove",
        "align"
      ]
    },
    "QueryCondition": {
      "description": "QueryCondition is a struct used for querying locks upon different conditions. Duration field and timestamp fields could be optional, depending on the LockQueryType.",
      "type": "object",
      "required": [
        "denom",
        "lock_query_type"
      ],
      "properties": {
        "denom": {
          "description": "Denom represents the token denomination we are looking to lock up",
          "type": "string"
        },
        "duration": {
          "description": "Duration is used to query locks with longer duration than the specified duration. Duration field must not be nil when the lock query type is `ByLockDuration`.",
          "anyOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "type": "null"
            }
          ]
        },
        "lock_query_type": {
          "description": "LockQueryType is a type of lock query, ByLockDuration | ByLockTime",
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "description": "Timestamp is used by locks started before the specified duration. Timestamp field must not be nil when the lock query type is `ByLockTime`. Querying locks with timestamp is currently not implemented.",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp2"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "StakingMsg": {
      "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
      "oneOf": [
        {
          "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "delegate"
          ],
          "properties": {
            "delegate": {
              "type": "object",
              "required": [
                "amount",
                "validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "undelegate"
          ],
          "properties": {
            "undelegate": {
              "type": "object",
              "required": [
                "amount",
                "validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "redelegate"
          ],
          "properties": {
            "redelegate": {
              "type": "object",
              "required": [
                "amount",
                "dst_validator",
                "src_validator"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Coin"
                },
                "dst_validator": {
                  "type": "string"
                },
                "src_validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Timestamp2": {
      "type": "object",
      "required": [
        "nanos",
        "seconds"
      ],
      "properties": {
        "nanos": {
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
          "type": "integer",
          "format": "int32"
        },
        "seconds": {
          "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UpdateConfig": {
      "description": "This structure stores the params used when updating the main Governance contract params.",
      "type": "object",
      "properties": {
        "expedited_proposal_voting_period": {
          "description": "Expedited Proposal voting period",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "tema_denom": {
          "description": "TEMA native token fulldenom",
          "type": [
            "string",
            "null"
          ]
        },
        "minimum_total_stake": {
          "description": "Minimum total stake required to submit a proposal",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "proposal_effective_delay": {
          "description": "Proposal effective delay",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "proposal_expiration_period": {
          "description": "Proposal expiration period",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "proposal_required_quorum": {
          "description": "Proposal required quorum",
          "type": [
            "string",
            "null"
          ]
        },
        "proposal_required_stake": {
          "description": "Proposal required stake",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint128",
          "minimum": 0.0
        },
        "proposal_required_threshold": {
          "description": "Proposal required threshold for executable proposals",
          "type": [
            "string",
            "null"
          ]
        },
        "proposal_voting_period": {
          "description": "Proposal voting period",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "quadratic_voting": {
          "description": "Toggle quadratic voting",
          "type": [
            "boolean",
            "null"
          ]
        },
        "staking_contract": {
          "description": "TEMA staking contract",
          "type": [
            "string",
            "null"
          ]
        },
        "vesting_contract_addr": {
          "description": "vesting' contract address",
          "type": [
            "string",
            "null"
          ]
        },
        "vesting_voting_power_multiplier": {
          "description": "Multiplier for vesting' allocation voting power",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "whitelist_add": {
          "description": "Links to add to whitelist",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "whitelist_remove": {
          "description": "Links to remove from whitelist",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "VoteOption": {
      "type": "string",
      "enum": [
        "yes",
        "no",
        "abstain",
        "no_with_veto"
      ]
    },
    "WasmMsg": {
      "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
      "oneOf": [
        {
          "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "type": "object",
              "required": [
                "contract_addr",
                "funds",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "msg": {
                  "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that when emitting the same Instantiate message multiple times, multiple instances on different addresses will be generated. See also Instantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "instantiate"
          ],
          "properties": {
            "instantiate": {
              "type": "object",
              "required": [
                "code_id",
                "funds",
                "label",
                "msg"
              ],
              "properties": {
                "admin": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "label": {
                  "description": "A human-readable label for the contract.\n\nValid values should: - not be empty - not be bigger than 128 bytes (or some chain-specific limit) - not start / end with whitespace",
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
          "type": "object",
          "required": [
            "migrate"
          ],
          "properties": {
            "migrate": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg",
                "new_code_id"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "new_code_id": {
                  "description": "the code_id of the new logic to place in the given contract",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "update_admin"
          ],
          "properties": {
            "update_admin": {
              "type": "object",
              "required": [
                "admin",
                "contract_addr"
              ],
              "properties": {
                "admin": {
                  "type": "string"
                },
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
          "type": "object",
          "required": [
            "clear_admin"
          ],
          "properties": {
            "clear_admin": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
